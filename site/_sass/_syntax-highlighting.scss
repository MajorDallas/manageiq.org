/**
 * Syntax highlighting styles
 */

/**
 * bootstrap/code override
 *
 * Prevents codeblocks from wrapping their content, and allows them to
 * `overflow: auto` as expected.
 */

pre {
  background: var(--color-bg-pre);
  border-color: var(--color-border-code-pre);
  color: var(--color-text-code-pre);

  code { white-space: pre; }
}

code {
  background-color: var(--color-bg-code);
  color: var(--color-text-code);
}

// console specific colorings, dark theme
//
// Taken from the "Monokai Remastered" theme
$console_bg: #222;

@mixin console_color_0      { color: #1a1a1a           }
@mixin console_color_1      { color: #f4005f           }
@mixin console_color_2      { color: #98e024           }
@mixin console_color_3      { color: #fd971f           }
@mixin console_color_4      { color: #9d65ff           }
@mixin console_color_5      { @include console_color_1 }
@mixin console_color_6      { color: #58d1eb           }
@mixin console_color_7      { color: #c4c5b5           }

@mixin console_color_0_bold { color: #625e4c;           font-weight: bold }
@mixin console_color_1_bold { @include console_color_1; font-weight: bold }
@mixin console_color_2_bold { @include console_color_2; font-weight: bold }
@mixin console_color_3_bold { color: #e0d561;           font-weight: bold }
@mixin console_color_4_bold { @include console_color_4; font-weight: bold }
@mixin console_color_5_bold { @include console_color_5; font-weight: bold }
@mixin console_color_6_bold { @include console_color_6; font-weight: bold }
@mixin console_color_7_bold { color: #f6f6ef;           font-weight: bold }


.highlight {
  color:      var(--color-text-code-pre);
  background: var(--color-bg-primary);

	.highlighter-rouge & {
		background: var(--color-bg-code-pre);
	}

	.bp    { color: var(--color-syntax-builtin-p) }                                              // Name.Builtin.Pseudo
	.c     { color: var(--color-syntax-comment); font-style: italic }                            // Comment
	.c1    { color: var(--color-syntax-comment); font-style: italic }                            // Comment.Single
	.cd    { color: var(--color-syntax-comment); font-style: italic; }
	.ch    { color: var(--color-syntax-comment); font-style: italic; }
	.cm    { color: var(--color-syntax-comment); font-style: italic }                            // Comment.Multiline
	.cp    { color: var(--color-syntax-comment-ex); font-weight: bold }                          // Comment.Preproc
	.cpf   { color: var(--color-syntax-comment); font-style: italic; }
	.cs    { color: var(--color-syntax-comment-ex); font-weight: bold; font-style: italic }      // Comment.Special
	.err   { color: var(--color-syntax-error); background-color: var(--color-syntax-error-bg); } // Error
	.gd    { color: #000000; background-color: #FFDDDD }                                         // Generic.Deleted
	.gd .x { color: #000000; background-color: #FFAAAA }                                         // Generic.Deleted.Specific
	.ge    { font-style: italic }                                                                // Generic.Emph
	.gh    { color: #999999 }                                                                    // Generic.Heading
	.gi    { color: #000000; background-color: #DDFFDD }                                         // Generic.Inserted
	.gi .x { color: #000000; background-color: #AAFFAA }                                         // Generic.Inserted.Specific
	.go    { color: #888888 }                                                                    // Generic.Output
	.gp    { color: #555555 }                                                                    // Generic.Prompt
	.gr    { color: #AA0000 }                                                                    // Generic.Error
	.gs    { font-weight: bold }                                                                 // Generic.Strong
	.gt    { color: #AA0000 }                                                                    // Generic.Traceback
	.gu    { color: #AAAAAA }                                                                    // Generic.Subheading
	.il    { color: var(--color-syntax-number); }                                                // Literal.Number.Integer.Long
	.k     { color: var(--color-syntax-keyword); font-weight: bold; }                            // Keyword
	.kc    { color: var(--color-syntax-keyword); font-weight: bold; }                            // Keyword.Constant
	.kd    { color: var(--color-syntax-keyword); font-weight: bold; }                            // Keyword.Declaration
	.kn    { color: var(--color-syntax-kn); font-weight: bold; }
	.kp    { color: var(--color-syntax-keyword); font-weight: bold; }                            // Keyword.Pseudo
	.kr    { color: var(--color-syntax-keyword); font-weight: bold; }                            // Keyword.Reserved
	.kt    { color: var(--color-syntax-kt); font-weight: bold; }                                 // Keyword.Type
	.kv    { color: var(--color-syntax-keyword); font-weight: bold; }
	.m     { color: var(--color-syntax-number); }
	.mb    { color: var(--color-syntax-number); }                                                // Literal.Number
	.mf    { color: var(--color-syntax-number); }
	.mh    { color: var(--color-syntax-number); }                                                // Literal.Number.Float
	.mi    { color: var(--color-syntax-number); }                                                // Literal.Number.Hex
	.mo    { color: var(--color-syntax-number); }                                                // Literal.Number.Integer
	.mx    { color: var(--color-syntax-number); }                                                // Literal.Number.Oct
	.na    { color: var(--color-syntax-na); }                                                    // Name.Attribute
	.nb    { color: var(--color-syntax-nb); }                                                    // Name.Builtin
	.nc    { color: var(--color-syntax-nc); font-weight: bold; }                                 // Name.Class
	.nd    { color: var(--color-syntax-nd); font-weight: bold; }
	.ne    { color: var(--color-syntax-ne); font-weight: bold; }                                 // Name.Exception
	.nf    { color: var(--color-syntax-ne); font-weight: bold; }                                 // Name.Function
	.ni    { color: var(--color-syntax-ni); }                                                    // Name.Entity
	.nl    { color: var(--color-syntax-nl); font-weight: bold; }
	.nn    { color: var(--color-syntax-nn); }                                                    // Name.Namespace
	.no    { color: var(--color-syntax-constant); }                                              // Name.Constant
	.nt    { color: var(--color-syntax-tag); }                                                   // Name.Tag
	.nv    { color: var(--color-syntax-nv); }                                                    // Name.Variable
	.o     { color: var(--color-syntax-op); font-weight: bold }                                  // Operator
	.ow    { color: var(--color-syntax-op); font-weight: bold }                                  // Operator.Word
	.s     { color: var(--color-syntax-string) }                                                 // Literal.String
	.s1    { color: var(--color-syntax-string) }                                                 // Literal.String.Single
	.s2    { color: var(--color-syntax-string) }                                                 // Literal.String.Double
	.sa    { color: var(--color-syntax-sa); font-weight: bold; }
	.sb    { color: var(--color-syntax-string) }                                                 // Literal.String.Backtick
	.sc    { color: var(--color-syntax-string) }                                                 // Literal.String.Char
	.sd    { color: var(--color-syntax-string) }                                                 // Literal.String.Doc
	.se    { color: var(--color-syntax-e) }                                                      // Literal.String.Escape
	.sh    { color: var(--color-syntax-string) }                                                 // Literal.String.Heredoc
	.si    { color: var(--color-syntax-string) }                                                 // Literal.String.Interpol
	.sr    { color: var(--color-syntax-sr) }                                                     // Literal.String.Regex
	.ss    { color: var(--color-syntax-ss) }                                                     // Literal.String.Symbol
	.sx    { color: var(--color-syntax-string) }                                                 // Literal.String.Other
	.vc    { color: var(--color-syntax-tag) }                                                    // Name.Variable.Class
	.vg    { color: var(--color-syntax-tag) }                                                    // Name.Variable.Global
	.vi    { color: var(--color-syntax-tag) }                                                    // Name.Variable.Instance
	.vm    { color: var(--color-syntax-vm) }
	.w     { color: var(--color-syntax-w) }                                                      // Text.Whitespace
}

.language-console {
  pre code { @include console_color_7; }

  &.highlighter-rouge .highlight {
    background: $console_bg;
  }

  .c  { @include console_color_0_bold; } // Comment
	.go { color: #888888; }
  .kv { @include console_color_7_bold; } // Extra args
  .nc { @include console_color_1_bold; } // Command
	.nt { @include console_color_1; }      // Command Argument
  .w  { @include console_color_3_bold; } // Prompt
}
